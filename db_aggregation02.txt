1Q.Write Mongo query to retrieve the unique citye's from the buyers address as "\_id".
ans:db.buyers.distinct("address.city");
note:In MongoDB, the distinct method is used to find the distinct (unique) values
 for a specified field across a single collection. 
 It essentially retrieves an array of unique values from the field you specify.

 2Q.  Write Mongo query to retrieve the unique zip from the buyers address as "\_id".
 ans: db.buyers.distinct("address.zip");

 3Q. Write Mongo query to retrieve the unique order_id in ascending order from the order_details.
 ans: db.order_details.distinct("order_id").sort();

 4Q.Write Mongo query to retrieve the unique customer_id from the orders.
 ans:db.orders.distinct("customer_id");

 5Q.Write Mongo query to retrieve the unique paymentMethod's from the payments collection as "\_id"
 ans:db.payments.distinct("paymentMethod");

 6Q. Write Mongo query to retrieve the unique paymentstatus's from the payments collection as "\_id".
 ans:db.payments.distinct("paymentstatus");

 7Q.Write Mongo query to retrieve the unique category_id product from products.
 db.products.distinct("category_id");

 8Q.Write a MongoDB query to aggregate the total sales per customer and list the top 5 customers by total sales amount.
  Include the customer's ID and their total sales in the output.
  ans:db.orders.aggregate([{$group:{_id:"$category_id",totalSales:{$sum:"$total"}}},{$sort:{totalSales:-1}},{$limit:5},{$project:{customer_id:1,totalSales:1}}])
 
 9Q.Aggregate the orders to count how many there are per status and show only the first 3 statuses based on the aggregated count.
 ans:db.orders.aggregate([{$group:{_id:"$status",count:{$sum:1}}},{$sort:{count:1}},{$limit:3}])

 10Q.Write a MongoDB query to calculate the total amount of payments that have a success status.
 ans:db.payments.aggregate([{$match:{paymentstatus:"success"}},{$group:{_id:null,totalAmount:{$sum:"$amount"}}}]);
  11Q. 11. Aggregate suppliers to find the one with the highest total quantity of products supplied, 
  filtering to only include suppliers with a total product quantity greater than 100.
  ans:db.products.aggregate([{$group:{_id:"$supplier_id",totalQuantity:{$sum:"$quantity"}}},{$match:{totalQuantity:{gt:100}}},{$sort:{totalQuantity:-1}},{$limit:1}])
  12Q.Write a MongoDB query to find the top-selling product category based on total sales revenue.
  i am able to sovle it.


